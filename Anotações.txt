@use	carrega mixins, functions e variáveis de outras folhas de estilos Sass e combina o CSS de diversas folhas de estilo juntos.

@forward	carrega uma folha de estilo Sass e torna os mixins, functions e variáveis disponíveis quando a folha de estilo é carregada pela regra do @use.

@import	estende as regras de CSS para carregar styles, mixins, functions e variáveis de outras folhas de estilo.

@mixins e @include	facilitam a reutilização de trechos de código.

@function	define funções customizadas que podem ser utilizadas em expressões.

@extend	permite que os seletores herdem estilos uns dos outros.

@at-root	coloca estilos dentro dele na raiz do documento CSS.

@error	faz com que a compilação falhe com uma mensagem de erro.

@warn	imprime um aviso sem parar totalmente a compilação.

@debug	imprime uma mensagem para fins de debugging.





--------------------------------condições


Assim como a maioria das linguagens de programação usadas atualmente, no Sass também existe as conficionais if e else.

@if
O padrão de escrita do if é @if <expression> { ... }, que controla se seu bloco é avaliado ou não (incluindo a emissão de qualquer estilo como CSS). A expressão geralmente retorna true ou false —se a expressão retornar true, o bloco será executado e, se a expressão retornar false, não será executado.

@else
Já no caso do else, escrita é @else { ... }. O bloco desta regra é avaliado se a @if retornar falso.

Exemplo prático
Na partial _footer,sass, vamos incluir um parâmetro para indicar o lado do gradiente, como ilustra o código abaixo:



@mixin bg-cores($lado, $cores...)
    @if $lado == left
        background: linear-gradient(to left, $cores)
    @else 
        background: linear-gradient(to right, $cores)




        Se o parâmetro $lado tiver o conteúdo left, então vamos aplicar o gradiente para o lado esquerdo. 
        Senão, vamos aplicar o gradiente para o lado direito


            @include bg-cores("", $cor-primaria, $cor-secundaria, $cor-terciaria, $cor-terciaria